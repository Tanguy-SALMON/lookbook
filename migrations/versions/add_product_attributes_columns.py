"""Add product attributes columns

Revision ID: add_product_attributes_columns
Revises: 9fe176c77da3
Create Date: 2025-09-20 12:15:00.000000

"""
from alembic import op
import sqlalchemy as sa
import json


# revision identifiers, used by Alembic.
revision = 'add_product_attributes_columns'
down_revision = '9fe176c77da3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # First, rename the table from 'items' to 'products' if it hasn't been renamed already
    try:
        op.rename_table('items', 'products')
    except:
        # Table might already be renamed
        pass

    # Add new columns for product attributes
    op.add_column('products', sa.Column('season', sa.String(length=50), nullable=True))
    op.add_column('products', sa.Column('url_key', sa.String(length=255), nullable=True))
    op.add_column('products', sa.Column('product_created_at', sa.DateTime(), nullable=True))
    op.add_column('products', sa.Column('stock_qty', sa.Integer(), nullable=True, server_default='0'))
    op.add_column('products', sa.Column('category', sa.String(length=100), nullable=True))
    op.add_column('products', sa.Column('color', sa.String(length=100), nullable=True))
    op.add_column('products', sa.Column('material', sa.String(length=100), nullable=True))
    op.add_column('products', sa.Column('pattern', sa.String(length=100), nullable=True))
    op.add_column('products', sa.Column('occasion', sa.String(length=100), nullable=True))

    # Create index for url_key
    op.create_index(op.f('ix_products_url_key'), 'products', ['url_key'], unique=False)

    # Migrate data from JSON attributes to individual columns
    connection = op.get_bind()
    result = connection.execute("SELECT id, attributes FROM products WHERE attributes IS NOT NULL")

    for row in result:
        product_id = row.id
        attributes = row.attributes

        if isinstance(attributes, str):
            try:
                attributes = json.loads(attributes)
            except:
                attributes = {}
        elif attributes is None:
            attributes = {}

        # Update the product with the extracted attributes
        update_query = """
        UPDATE products SET
            season = :season,
            url_key = :url_key,
            product_created_at = :product_created_at,
            stock_qty = :stock_qty,
            category = :category,
            color = :color,
            material = :material,
            pattern = :pattern,
            occasion = :occasion
        WHERE id = :product_id
        """

        connection.execute(update_query, {
            'product_id': product_id,
            'season': attributes.get('season'),
            'url_key': attributes.get('url_key'),
            'product_created_at': attributes.get('created_at'),
            'stock_qty': attributes.get('stock_qty', 0),
            'category': attributes.get('category'),
            'color': attributes.get('color'),
            'material': attributes.get('material'),
            'pattern': attributes.get('pattern'),
            'occasion': attributes.get('occasion')
        })

    # Make url_key unique
    op.create_unique_constraint('uq_products_url_key', 'products', ['url_key'])

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop the unique constraint
    op.drop_constraint('uq_products_url_key', 'products', type_='unique')

    # Drop the index
    op.drop_index(op.f('ix_products_url_key'), table_name='products')

    # Drop the columns
    op.drop_column('products', 'occasion')
    op.drop_column('products', 'pattern')
    op.drop_column('products', 'material')
    op.drop_column('products', 'color')
    op.drop_column('products', 'category')
    op.drop_column('products', 'stock_qty')
    op.drop_column('products', 'product_created_at')
    op.drop_column('products', 'url_key')
    op.drop_column('products', 'season')

    # Rename table back to items
    try:
        op.rename_table('products', 'items')
    except:
        # Table might already be renamed
        pass

    # ### end Alembic commands ###